# bot.py
import asyncio
import os
import traceback
from datetime import datetime, time, timedelta, date
from typing import Optional

import pytz
from telegram import Update, ReplyKeyboardMarkup, BotCommand
from telegram.helpers import escape_markdown
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)

import config
import excel_reporter
from services import HolidayService

config.setup_logging()
logger = config.get_logger(__name__)

BTN_GET_HOLIDAYS = "–£–∑–Ω–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –Ω–∞ –¥–µ–Ω—å üìÖ"
BTN_CREATE_REPORT = "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Excel-–æ—Ç—á–µ—Ç üìä"

GET_START_DATE, GET_END_DATE, GET_SPECIFIC_DATE = range(3)


# --- –ò–ó–ú–ï–ù–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ ---
async def _create_holidays_message(target_date: date) -> Optional[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É, –≤–∫–ª—é—á–∞—è —Ä–µ–≥–∏–æ–Ω—ã.
    """
    try:
        target_date_str = target_date.strftime('%Y-%m-%d')
        target_date_formatted = target_date.strftime('%d.%m.%Y')

        holiday_service = HolidayService()
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: {'RU': {'–ü—Ä–∞–∑–¥–Ω–∏–∫': ['–†–µ–≥–∏–æ–Ω1', '–†–µ–≥–∏–æ–Ω2']}}
        holidays_by_country = holiday_service.get_holidays_for_date(target_date_str)

        escaped_date = escape_markdown(target_date_formatted, version=2)

        if not holidays_by_country:
            return f"üóìÔ∏è –ù–∞ {escaped_date} –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\."

        message_parts = [f"üéâ *–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –Ω–∞ {escaped_date}* üéâ\n"]
        for country_code in sorted(holidays_by_country.keys()):
            escaped_country_name = escape_markdown(country_code.upper(), version=2)
            message_parts.append(f"\n*{escaped_country_name}*")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å {–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–∞–∑–¥–Ω–∏–∫–∞: [—Ä–µ–≥–∏–æ–Ω—ã]}
            holiday_details = holidays_by_country[country_code]

            # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º –∏ –∏—Ö —Ä–µ–≥–∏–æ–Ω–∞–º
            for holiday_name, regions in holiday_details.items():
                escaped_holiday_name = escape_markdown(holiday_name, version=2)

                # –ï—Å–ª–∏ —É –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –µ—Å—Ç—å —Ä–µ–≥–∏–æ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ
                if regions:
                    escaped_regions = escape_markdown(", ".join(regions), version=2)
                    message_parts.append(f"  \\- {escaped_holiday_name} \\- _{escaped_regions}_")
                else:
                    # –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    message_parts.append(f"  \\- {escaped_holiday_name}")

        return "\n".join(message_parts)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –¥–ª—è –¥–∞—Ç—ã {target_date}: {e}", exc_info=True)
        return None


# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ bot.py –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

async def send_daily_holidays_notification(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    log_ctx = {'job_name': job.name if job else 'manual_run'}
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö.", extra={'context': log_ctx})

    tz = pytz.timezone(config.TZ_INFO)
    today = (datetime.now(tz)).date()
    message_text = await _create_holidays_message(today)

    if message_text:
        await context.bot.send_message(
            chat_id=config.TELEGRAM_CHANNEL_ID,
            text=message_text,
            parse_mode='MarkdownV2'
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {config.TELEGRAM_CHANNEL_ID}.", extra={'context': log_ctx})
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö.", extra={'context': log_ctx})


async def start_holiday_check_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ì–ì–ì–ì-–ú–ú-–î–î`.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel.",
        parse_mode='Markdown'
    )
    return GET_SPECIFIC_DATE


async def handle_specific_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    try:
        target_date = datetime.strptime(user_input, '%Y-%m-%d').date()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –Ω–∞ –¥–∞—Ç—É: {user_input}")
        await update.message.reply_text("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        message_text = await _create_holidays_message(target_date)
        if message_text:
            await update.message.reply_text(message_text, parse_mode='MarkdownV2')
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É `–ì–ì–ì–ì-–ú–ú-–î–î`.")
        return GET_SPECIFIC_DATE


async def post_init(application: Application):
    await application.bot.set_my_commands([
        BotCommand("start", "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"),
    ])
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    keyboard = [[BTN_GET_HOLIDAYS], [BTN_CREATE_REPORT]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_html(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å Excel-–æ—Ç—á–µ—Ç.",
        reply_markup=reply_markup,
    )
    return ConversationHandler.END


async def start_report_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í—ã –Ω–∞—á–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ **–¥–∞—Ç—É –Ω–∞—á–∞–ª–∞** –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ì–ì–ì–ì-–ú–ú-–î–î`.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel.",
        parse_mode='Markdown'
    )
    return GET_START_DATE


async def handle_start_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    try:
        datetime.strptime(user_input, '%Y-%m-%d')
        context.user_data['start_date'] = user_input
        await update.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: `{user_input}`.\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ **–¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è** –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ (`–ì–ì–ì–ì-–ú–ú-–î–î`).",
            parse_mode='Markdown'
        )
        return GET_END_DATE
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É `–ì–ì–ì–ì-–ú–ú-–î–î`.")
        return GET_START_DATE


async def handle_end_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    start_date_str = context.user_data.get('start_date')
    try:
        start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
        end_date = datetime.strptime(user_input, '%Y-%m-%d')
        if end_date < start_date:
            await update.message.reply_text("‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞.")
            return GET_END_DATE
        await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel-—Ñ–∞–π–ª...")
        report_path = await asyncio.to_thread(
            excel_reporter.generate_holidays_report, start_date=start_date_str, end_date=user_input
        )
        with open(report_path, 'rb') as report_file:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=report_file,
                filename=os.path.basename(report_path),
                caption="‚úÖ –í–∞—à Excel-–æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!"
            )
        if report_path and os.path.exists(report_path):
            os.remove(report_path)
        context.user_data.clear()
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É `–ì–ì–ì–ì-–ú–ú-–î–î`.")
        return GET_END_DATE


async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é.")
    context.user_data.clear()
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?")
    return ConversationHandler.END


def main():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    if not config.TELEGRAM_BOT_TOKEN:
        logger.critical("–¢–æ–∫–µ–Ω TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return

    application = ApplicationBuilder().token(config.TELEGRAM_BOT_TOKEN).post_init(post_init).build()

    job_queue = application.job_queue
    if config.TELEGRAM_CHANNEL_ID and config.DAILY_NOTIFICATION_TIME:
        try:
            h, m = map(int, config.DAILY_NOTIFICATION_TIME.split(':'))
            notification_time = time(h, m, tzinfo=pytz.timezone(config.TZ_INFO))
            job_queue.run_daily(send_daily_holidays_notification, time=notification_time,
                                name="daily_holiday_notification")
            logger.info(
                f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ {config.DAILY_NOTIFICATION_TIME} ({config.TZ_INFO}).")
        except (ValueError, TypeError) as e:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ DAILY_NOTIFICATION_TIME: {e}")

    holiday_check_conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & filters.Regex(f'^{BTN_GET_HOLIDAYS}$'), start_holiday_check_conversation)],
        states={GET_SPECIFIC_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_specific_date)]},
        fallbacks=[CommandHandler('cancel', cancel_conversation), CommandHandler('start', start)],
    )

    report_conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & filters.Regex(f'^{BTN_CREATE_REPORT}$'), start_report_conversation)],
        states={
            GET_START_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_start_date)],
            GET_END_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_end_date)],
        },
        fallbacks=[CommandHandler('cancel', cancel_conversation), CommandHandler('start', start)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(holiday_check_conv_handler)
    application.add_handler(report_conv_handler)

    application.run_polling()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    main()
