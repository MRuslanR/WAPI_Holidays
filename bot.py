import asyncio
import os
import traceback
from datetime import datetime, time, timedelta, date
from typing import Optional
import calendar

import pytz
from telegram import Update, ReplyKeyboardMarkup, BotCommand
from telegram.helpers import escape_markdown
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
    PicklePersistence 
)

import config
import excel_reporter
import email_sender
from services import HolidayService

config.setup_logging()
logger = config.get_logger(__name__)

BTN_GET_HOLIDAYS = "–£–∑–Ω–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –Ω–∞ –¥–µ–Ω—å üìÖ"
BTN_CREATE_REPORT = "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Excel-–æ—Ç—á–µ—Ç üìä"

GET_START_DATE, GET_END_DATE, GET_SPECIFIC_DATE = range(3)


# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ï–ñ–ï–ú–ï–°–Ø–ß–ù–û–ô –ó–ê–î–ê–ß–ò ---

def get_next_date_for_job():
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞. –ê–Ω–∞–ª–æ–≥ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ main.py"""
    today = date.today()
    year = today.year
    if today.month == 12:
        next_month = 1
        year += 1
    else:
        next_month = today.month + 1

    last_day_of_month = calendar.monthrange(year, next_month)[1]
    first_day = date(year, next_month, 1).isoformat()
    last_day = date(year, next_month, last_day_of_month).isoformat()
    return str(year), str(next_month).zfill(2), first_day, last_day


async def run_monthly_data_collection(context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º.
    """
    job_name = context.job.name if context.job else 'manual_run'
    log_ctx = {'job_name': job_name}
    logger.info("–ó–∞–ø—É—Å–∫ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö...", extra={'context': log_ctx})

    await context.bot.send_message(
        chat_id=config.TELEGRAM_CHANNEL_ID,
        text="üöÄ –ù–∞—á–∏–Ω–∞—é –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü..."
    )

    try:
        countries_for_holidays = config.COUNTRIES
        if not countries_for_holidays:
            logger.warning("–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –¥–ª—è —Å–±–æ—Ä–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.",
                           extra={'context': log_ctx})
            await context.bot.send_message(
                chat_id=config.TELEGRAM_CHANNEL_ID,
                text="‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç. –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—â–µ–Ω."
            )
            return

        year, next_month_str, first_day, last_day = get_next_date_for_job()
        period_str = f"{next_month_str}/{year}"
        logger.info(f"–¶–µ–ª–µ–≤–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å–±–æ—Ä–∞: {period_str}", extra={'context': log_ctx})

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
        holiday_service = HolidayService()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
        for country_code in countries_for_holidays:
            try:
                holiday_service.process_holidays_for_period(
                    country_code=country_code,
                    year=year,
                    month=next_month_str,
                    first_day=first_day,
                    last_day=last_day
                )
            except Exception as e:
                logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω—ã {country_code}: {e}", exc_info=True)
                # –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç—Ä–∞–Ω–∞–º–∏
                await context.bot.send_message(
                    chat_id=config.TELEGRAM_CHANNEL_ID,
                    text=f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω—ã {country_code}: {e}"
                )

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        escaped_period = escape_markdown(period_str, version=2)
        escaped_countries = escape_markdown(', '.join(countries_for_holidays), version=2)
        escaped_tokens = escape_markdown(str(holiday_service.grand_total_tokens), version=2)

        price_str = f"{holiday_service.grand_total_price:.4f}"
        escaped_price = escape_markdown(price_str, version=2)

        summary_message = (
            f"‚úÖ *–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω* ‚ú®\n\n"
            f"*–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:* `{escaped_period}`\n"
            f"*–°—Ç—Ä–∞–Ω—ã:* `{escaped_countries}`\n\n"
            f"üìä *–ò—Ç–æ–≥–∏ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ:*\n"
            f"  ‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: `{escaped_tokens}`\n"
            f"  ‚Ä¢ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: `{escaped_price}$`\n\n"
            f"‚è≥ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Excel –æ—Ç—á–µ—Ç–∞\\.\\.\\."
        )
        await context.bot.send_message(
            chat_id=config.TELEGRAM_CHANNEL_ID,
            text=summary_message,
            parse_mode='MarkdownV2'
        )
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel-–æ—Ç—á–µ—Ç
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-–æ—Ç—á–µ—Ç–∞...", extra={'context': log_ctx})
        report_path = await asyncio.to_thread(
            excel_reporter.generate_holidays_report, start_date=first_day, end_date=last_day
        )
        with open(report_path, 'rb') as report_file:
            await context.bot.send_document(
                chat_id=config.TELEGRAM_CHANNEL_ID,
                document=report_file,
                filename=os.path.basename(report_path),
                caption=f"üìä Excel-–æ—Ç—á–µ—Ç –ø–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º –Ω–∞ {period_str} –≥–æ—Ç–æ–≤!"
            )
        if report_path and os.path.exists(report_path):
            os.remove(report_path)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ {report_path} —É–¥–∞–ª–µ–Ω.", extra={'context': log_ctx})

        # --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ë–õ–û–ö–ê: –û–¢–ü–†–ê–í–ö–ê EMAIL-–£–í–ï–î–û–ú–õ–ï–ù–ò–ô ---
        if config.EMAIL_NOTIFICATIONS_ENABLED:
            logger.info("–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            await context.bot.send_message(
                chat_id=config.TELEGRAM_CHANNEL_ID,
                text="üìß –†–∞—Å—Å—ã–ª–∞—é email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º..."
            )
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–µ—Å—è—Ü–∞ –¥–ª—è –ø–∏—Å—å–º–∞
                month_names = ["", "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                               "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
                month_name = month_names[int(next_month_str)]

                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
                email_result = await asyncio.to_thread(
                    email_sender.send_holiday_email_to_all,
                    year=int(year),
                    month_name=month_name,
                    start_date=first_day,
                    end_date=last_day
                )

                if email_result.get('success'):
                    success_msg = (
                        f"‚úÖ Email\\-—Ä–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\\.\n"
                        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å–µ–º: `{email_result.get('sent_count', 'N/A')}` "
                        f"–∏–∑ `{email_result.get('total_recipients', 'N/A')}`\\."
                    )
                    await context.bot.send_message(
                        chat_id=config.TELEGRAM_CHANNEL_ID,
                        text=success_msg,
                        parse_mode='MarkdownV2'
                    )
                else:
                    error_msg = f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {email_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    logger.error(error_msg, extra={'context': log_ctx})
                    await context.bot.send_message(
                        chat_id=config.TELEGRAM_CHANNEL_ID,
                        text=escape_markdown(error_msg, version=2),
                        parse_mode='MarkdownV2'
                    )
            except Exception as e:
                logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ email.", exc_info=True)
                error_message = (
                    f"‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email* ‚ùå\n\n"
                    f"`{escape_markdown(str(e), version=2)}`"
                )
                await context.bot.send_message(
                    chat_id=config.TELEGRAM_CHANNEL_ID,
                    text=error_message,
                    parse_mode='MarkdownV2'
                )
        else:
            logger.info("Email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---


    except Exception as e:
        logger.critical("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –∑–∞–¥–∞—á–∏.", exc_info=True)
        error_message = (
            f"‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö* ‚ùå\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\\. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\\.\n\n"
            f"*–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:*\n`{escape_markdown(str(e), version=2)}`\n\n"
            f"*Traceback:*\n```\n{escape_markdown(traceback.format_exc(limit=1), version=2)}\n```"
        )
        await context.bot.send_message(
            chat_id=config.TELEGRAM_CHANNEL_ID,
            text=error_message,
            parse_mode='MarkdownV2'
        )


async def scheduled_monthly_task(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞, –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É.
    """
    tz = pytz.timezone(config.TZ_INFO)
    current_day = datetime.now(tz).day

    logger.debug(
        f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –∑–∞–¥–∞—á–∏. –°–µ–≥–æ–¥–Ω—è {current_day}-–µ —á–∏—Å–ª–æ. –¶–µ–ª—å: {config.MONTHLY_JOB_DAY}.")

    if current_day == config.MONTHLY_JOB_DAY:
        logger.info(f"–°–µ–≥–æ–¥–Ω—è {current_day}-–µ —á–∏—Å–ª–æ, –∑–∞–ø—É—Å–∫–∞—é –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö.")
        await run_monthly_data_collection(context)
    else:
        logger.info(
            f"–°–µ–≥–æ–¥–Ω—è {current_day}-–µ —á–∏—Å–ª–æ, –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {config.MONTHLY_JOB_DAY}-–µ).")


# --- –ö–û–ù–ï–¶ –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô ---


async def _create_holidays_message(target_date: date) -> Optional[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É, –≤–∫–ª—é—á–∞—è —Ä–µ–≥–∏–æ–Ω—ã.
    """
    try:
        target_date_str = target_date.strftime('%Y-%m-%d')
        target_date_formatted = target_date.strftime('%d.%m.%Y')

        holiday_service = HolidayService()
        holidays_by_country = holiday_service.get_holidays_for_date(target_date_str)

        escaped_date = escape_markdown(target_date_formatted, version=2)

        if not holidays_by_country:
            return f"üóìÔ∏è –ù–∞ {escaped_date} –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\."

        message_parts = [f"üéâ *–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –Ω–∞ {escaped_date}* üéâ\n"]
        for country_code in sorted(holidays_by_country.keys()):
            escaped_country_name = escape_markdown(country_code.upper(), version=2)
            message_parts.append(f"\n*{escaped_country_name}*")

            holiday_details = holidays_by_country[country_code]

            for holiday_name, regions in holiday_details.items():
                escaped_holiday_name = escape_markdown(holiday_name, version=2)
                if regions:
                    escaped_regions = escape_markdown(", ".join(regions), version=2)
                    message_parts.append(f"  \\- {escaped_holiday_name} \\- _{escaped_regions}_")
                else:
                    message_parts.append(f"  \\- {escaped_holiday_name}")

        return "\n".join(message_parts)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –¥–ª—è –¥–∞—Ç—ã {target_date}: {e}", exc_info=True)
        return None


async def send_daily_holidays_notification(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    log_ctx = {'job_name': job.name if job else 'manual_run'}
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö.", extra={'context': log_ctx})

    tz = pytz.timezone(config.TZ_INFO)
    today = (datetime.now(tz)).date()

    message_text = await _create_holidays_message(today)

    if message_text:
        await context.bot.send_message(
            chat_id=config.TELEGRAM_CHANNEL_ID,
            text=message_text,
            parse_mode='MarkdownV2'
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {config.TELEGRAM_CHANNEL_ID}.", extra={'context': log_ctx})
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö.", extra={'context': log_ctx})


async def start_holiday_check_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ì–ì–ì–ì-–ú–ú-–î–î`.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel.",
        parse_mode='Markdown'
    )
    return GET_SPECIFIC_DATE


async def handle_specific_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    try:
        target_date = datetime.strptime(user_input, '%Y-%m-%d').date()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –Ω–∞ –¥–∞—Ç—É: {user_input}")
        await update.message.reply_text("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        message_text = await _create_holidays_message(target_date)
        if message_text:
            await update.message.reply_text(message_text, parse_mode='MarkdownV2')
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É `–ì–ì–ì–ì-–ú–ú-–î–î`.")
        return GET_SPECIFIC_DATE


async def post_init(application: Application):
    await application.bot.set_my_commands([
        BotCommand("start", "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"),
    ])
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    keyboard = [[BTN_GET_HOLIDAYS], [BTN_CREATE_REPORT]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_html(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å Excel-–æ—Ç—á–µ—Ç.",
        reply_markup=reply_markup,
    )
    return ConversationHandler.END


async def start_report_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í—ã –Ω–∞—á–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ **–¥–∞—Ç—É –Ω–∞—á–∞–ª–∞** –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ì–ì–ì–ì-–ú–ú-–î–î`.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel.",
        parse_mode='Markdown'
    )
    return GET_START_DATE


async def handle_start_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    try:
        datetime.strptime(user_input, '%Y-%m-%d')
        context.user_data['start_date'] = user_input
        await update.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: `{user_input}`.\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ **–¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è** –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ (`–ì–ì–ì–ì-–ú–ú-–î–î`).",
            parse_mode='Markdown'
        )
        return GET_END_DATE
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É `–ì–ì–ì–ì-–ú–ú-–î–î`.")
        return GET_START_DATE


async def handle_end_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    start_date_str = context.user_data.get('start_date')
    try:
        start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
        end_date = datetime.strptime(user_input, '%Y-%m-%d')
        if end_date < start_date:
            await update.message.reply_text("‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞.")
            return GET_END_DATE
        await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel-—Ñ–∞–π–ª...")
        report_path = await asyncio.to_thread(
            excel_reporter.generate_holidays_report, start_date=start_date_str, end_date=user_input
        )
        with open(report_path, 'rb') as report_file:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=report_file,
                filename=os.path.basename(report_path),
                caption="‚úÖ –í–∞—à Excel-–æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!"
            )
        if report_path and os.path.exists(report_path):
            os.remove(report_path)
        context.user_data.clear()
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É `–ì–ì–ì–ì-–ú–ú-–î–î`.")
        return GET_END_DATE


async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é.")
    context.user_data.clear()
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?")
    return ConversationHandler.END


def main():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    if not config.TELEGRAM_BOT_TOKEN:
        logger.critical("–¢–æ–∫–µ–Ω TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return

    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    # –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —Ñ–∞–π–ª 'bot_persistence.pickle'
    persistence = PicklePersistence(filepath="bot_persistence.pickle")
    # <<< –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø

    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç persistence –≤ ApplicationBuilder
    application = (
        ApplicationBuilder()
        .token(config.TELEGRAM_BOT_TOKEN)
        .persistence(persistence)
        .post_init(post_init)
        .build()
    )
    # <<< –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø

    job_queue = application.job_queue
    tz = pytz.timezone(config.TZ_INFO)

    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –µ–µ —Å–æ–∑–¥–∞–Ω–∏–µ–º
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    daily_job_name = "daily_holiday_notification"
    if config.TELEGRAM_CHANNEL_ID and config.DAILY_NOTIFICATION_TIME:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏ (–æ–Ω–∞ –º–æ–≥–ª–∞ –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞)
        if not job_queue.get_jobs_by_name(daily_job_name):
            try:
                h, m = map(int, config.DAILY_NOTIFICATION_TIME.split(':'))
                notification_time = time(h, m, tzinfo=tz)
                job_queue.run_daily(
                    send_daily_holidays_notification,
                    time=notification_time,
                    name=daily_job_name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                )
                logger.info(
                    f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ {config.DAILY_NOTIFICATION_TIME} ({config.TZ_INFO}).")
            except (ValueError, TypeError) as e:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ DAILY_NOTIFICATION_TIME: {e}")
        else:
            logger.info(f"–ó–∞–¥–∞—á–∞ '{daily_job_name}' —É–∂–µ –±—ã–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ persistence —Ñ–∞–π–ª–∞.")

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    monthly_job_name = "monthly_data_collection_job"
    if config.TELEGRAM_CHANNEL_ID and config.MONTHLY_JOB_ENABLED:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏
        if not job_queue.get_jobs_by_name(monthly_job_name):
            try:
                h, m = map(int, config.MONTHLY_JOB_TIME.split(':'))
                job_time = time(h, m, tzinfo=tz)
                job_queue.run_daily(
                    scheduled_monthly_task,
                    time=job_time,
                    name=monthly_job_name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                )
                logger.info(
                    f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ {config.MONTHLY_JOB_DAY}-–µ —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ "
                    f"–≤ {config.MONTHLY_JOB_TIME} ({config.TZ_INFO})."
                )
            except (ValueError, TypeError) as e:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ MONTHLY_JOB_TIME: {e}")
        else:
            logger.info(f"–ó–∞–¥–∞—á–∞ '{monthly_job_name}' —É–∂–µ –±—ã–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ persistence —Ñ–∞–π–ª–∞.")
    # <<< –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø

    holiday_check_conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & filters.Regex(f'^{BTN_GET_HOLIDAYS}$'), start_holiday_check_conversation)],
        states={GET_SPECIFIC_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_specific_date)]},
        fallbacks=[CommandHandler('cancel', cancel_conversation), CommandHandler('start', start)],
        # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤ –¥–∏–∞–ª–æ–≥–∏
        persistent=True,
        name="holiday_check_conv"
        # <<< –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø
    )

    report_conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & filters.Regex(f'^{BTN_CREATE_REPORT}$'), start_report_conversation)],
        states={
            GET_START_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_start_date)],
            GET_END_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_end_date)],
        },
        fallbacks=[CommandHandler('cancel', cancel_conversation), CommandHandler('start', start)],
        # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤ –¥–∏–∞–ª–æ–≥–∏
        persistent=True,
        name="report_conv"
        # <<< –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(holiday_check_conv_handler)
    application.add_handler(report_conv_handler)

    application.run_polling()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    main()